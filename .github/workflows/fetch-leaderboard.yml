name: Fetch Megabonk Leaderboard

on:
  schedule:
    # Every 5 minutes
    - cron: '*/30 * * * *'
  
  # Allow manual trigger
  workflow_dispatch:
  
  # Also run on push to main
  push:
    branches: [ main ]

jobs:
  fetch-leaderboard:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install requests
    
    - name: Fetch leaderboard data
      run: |
        python << 'EOF'
        import requests
        import json
        import time
        from datetime import datetime
        from pathlib import Path

        API_URL = 'https://megabonk.fun/api/leaderboard'

        # More realistic headers to bypass anti-bot protection
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Accept-Encoding': 'gzip, deflate, br',
            'Referer': 'https://megabonk.fun/',
            'Origin': 'https://megabonk.fun',
            'Connection': 'keep-alive',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'same-origin',
            'Cache-Control': 'no-cache',
            'Pragma': 'no-cache'
        }

        print('üì° Fetching data from megabonk.fun...')
        
        max_retries = 3
        for attempt in range(max_retries):
            try:
                # Add a small delay before request
                if attempt > 0:
                    wait_time = attempt * 2
                    print(f'‚è≥ Waiting {wait_time}s before retry...')
                    time.sleep(wait_time)
                
                response = requests.get(
                    API_URL,
                    headers=headers,
                    timeout=30,
                    allow_redirects=True
                )
                
                print(f'üìä Response status: {response.status_code}')
                print(f'üìã Response headers: {dict(response.headers)}')
                
                response.raise_for_status()
                data = response.json()
                
                print(f'‚úÖ Successfully fetched {len(data)} entries')
                
                # Create output directory
                output_dir = Path('data')
                output_dir.mkdir(exist_ok=True)
                
                # Build complete data structure
                output = {
                    'source': 'megabonk.fun',
                    'source_url': API_URL,
                    'fetched_at': datetime.utcnow().isoformat() + 'Z',
                    'count': len(data),
                    'data': data
                }
                
                # Save main file
                with open('data/leaderboard.json', 'w', encoding='utf-8') as f:
                    json.dump(output, f, ensure_ascii=False, indent=2)
                
                # Save minified version
                with open('data/leaderboard.min.json', 'w', encoding='utf-8') as f:
                    json.dump(output, f, ensure_ascii=False, separators=(',', ':'))
                
                print('üíæ Data saved successfully')
                print(f'üìä Total entries: {len(data)}')
                
                if len(data) > 0:
                    print(f'ü•á Top player: {data[0]}')
                
                # Success - exit the retry loop
                break
                
            except requests.exceptions.HTTPError as e:
                print(f'‚ùå HTTP Error on attempt {attempt + 1}/{max_retries}: {e}')
                if e.response is not None:
                    print(f'Response body: {e.response.text[:500]}')
                if attempt == max_retries - 1:
                    raise
            except requests.exceptions.RequestException as e:
                print(f'‚ùå Request error on attempt {attempt + 1}/{max_retries}: {e}')
                if attempt == max_retries - 1:
                    raise
            except Exception as e:
                print(f'‚ùå Unexpected error on attempt {attempt + 1}/{max_retries}: {e}')
                if attempt == max_retries - 1:
                    raise
        
        print('‚ú® Fetch completed successfully')
        EOF
    
    - name: Commit data to repository
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Add data files
        git add data/leaderboard.json data/leaderboard.min.json
        
        # Check if there are changes
        if git diff --staged --quiet; then
          echo "üìù No changes in data, skipping commit"
        else
          git commit -m "ü§ñ Update leaderboard $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          git push
          echo "‚úÖ Data updated and pushed to repository"
        fi
    
    - name: Display summary
      run: |
        echo "==================================================="
        echo "‚úÖ Leaderboard fetch completed"
        echo "üìÖ Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "üìç Data location: data/leaderboard.json"
        echo "==================================================="
