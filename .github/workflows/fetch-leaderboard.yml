name: Fetch Megabonk Leaderboard

on:
  schedule:
    - cron: '*/5 * * * *'
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  fetch-leaderboard:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        pip install requests brotli
    
    - name: Fetch leaderboard data
      run: |
        python << 'EOF'
        import requests
        import json
        import brotli
        import time
        from datetime import datetime
        from pathlib import Path

        API_URL = 'https://megabonk.fun/api/leaderboard'

        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
            'Accept': 'application/json, text/plain, */*',
            'Accept-Language': 'en-US,en;q=0.9',
            'Referer': 'https://megabonk.fun/',
            'Origin': 'https://megabonk.fun'
        }

        print('📡 Fetching data from megabonk.fun...')
        
        max_retries = 3
        for attempt in range(max_retries):
            try:
                if attempt > 0:
                    wait_time = attempt * 2
                    print(f'⏳ Waiting {wait_time}s before retry...')
                    time.sleep(wait_time)
                
                response = requests.get(
                    API_URL,
                    headers=headers,
                    timeout=30
                )
                
                print(f'📊 Response status: {response.status_code}')
                print(f'📦 Content-Encoding: {response.headers.get("Content-Encoding", "none")}')
                print(f'📏 Content length: {len(response.content)} bytes')
                
                response.raise_for_status()
                
                # Smart parsing: try multiple methods
                data = None
                
                # Method 1: Try direct JSON parsing (most common case)
                try:
                    print('🔍 Method 1: Trying direct JSON parsing...')
                    data = response.json()
                    print(f'✅ Method 1 succeeded! Parsed {len(data)} entries')
                except Exception as e:
                    print(f'❌ Method 1 failed: {e}')
                
                # Method 2: Try parsing response.text as JSON
                if data is None:
                    try:
                        print('🔍 Method 2: Trying response.text parsing...')
                        data = json.loads(response.text)
                        print(f'✅ Method 2 succeeded! Parsed {len(data)} entries')
                    except Exception as e:
                        print(f'❌ Method 2 failed: {e}')
                
                # Method 3: Try manual Brotli decompression
                if data is None and response.headers.get('Content-Encoding') == 'br':
                    try:
                        print('🔍 Method 3: Trying manual Brotli decompression...')
                        decompressed = brotli.decompress(response.content)
                        data = json.loads(decompressed.decode('utf-8'))
                        print(f'✅ Method 3 succeeded! Parsed {len(data)} entries')
                    except Exception as e:
                        print(f'❌ Method 3 failed: {e}')
                
                # Method 4: Try decoding raw content
                if data is None:
                    try:
                        print('🔍 Method 4: Trying raw content decode...')
                        data = json.loads(response.content.decode('utf-8'))
                        print(f'✅ Method 4 succeeded! Parsed {len(data)} entries')
                    except Exception as e:
                        print(f'❌ Method 4 failed: {e}')
                
                if data is None:
                    raise Exception('All parsing methods failed')
                
                print(f'✅ Successfully got {len(data)} entries')
                
                # Create output directory
                output_dir = Path('data')
                output_dir.mkdir(exist_ok=True)
                
                # Build complete data structure
                output = {
                    'source': 'megabonk.fun',
                    'source_url': API_URL,
                    'fetched_at': datetime.utcnow().isoformat() + 'Z',
                    'count': len(data),
                    'data': data
                }
                
                # Save main file
                with open('data/leaderboard.json', 'w', encoding='utf-8') as f:
                    json.dump(output, f, ensure_ascii=False, indent=2)
                
                # Save minified version
                with open('data/leaderboard.min.json', 'w', encoding='utf-8') as f:
                    json.dump(output, f, ensure_ascii=False, separators=(',', ':'))
                
                print('💾 Data saved successfully')
                print(f'📊 Total entries: {len(data)}')
                
                if len(data) > 0:
                    first_entry = data[0]
                    print(f'🥇 First entry keys: {list(first_entry.keys())}')
                    
                    # Try to find player name field
                    player_name = (first_entry.get('name') or 
                                 first_entry.get('player') or 
                                 first_entry.get('username') or 
                                 first_entry.get('user') or
                                 'Unknown')
                    score = (first_entry.get('kills') or 
                           first_entry.get('score') or 
                           first_entry.get('points') or 0)
                    print(f'👤 Top player: {player_name} - {score:,}')
                
                # Success - exit the retry loop
                break
                
            except Exception as e:
                print(f'❌ Error on attempt {attempt + 1}/{max_retries}: {type(e).__name__}: {e}')
                if attempt == max_retries - 1:
                    print('🚨 All attempts failed!')
                    raise
        
        print('✨ Fetch completed successfully')
        EOF
    
    - name: Commit data to repository
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        git add data/leaderboard.json data/leaderboard.min.json
        
        if git diff --staged --quiet; then
          echo "📝 No changes in data, skipping commit"
        else
          git commit -m "🤖 Update leaderboard $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
          git push
          echo "✅ Data updated and pushed to repository"
        fi
    
    - name: Display summary
      run: |
        echo "==================================================="
        echo "✅ Leaderboard fetch completed"
        echo "📅 Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "📍 Data location: data/leaderboard.json"
        echo "==================================================="
